name: cdp

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    branches: [master]

jobs:
  build-test-rust:
    name: Build & test rust
    strategy:
      matrix:
        os:
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Create build version
        id: createbuildversion
        run: |
          echo "::set-output name=buildversion::$(date +'%y.%m%d').${{ github.run_number }}"

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install wasm-pack
        continue-on-error: false
        run: |
          cd lib
          cargo install wasm-pack

      - name: Run cargo build
        continue-on-error: false
        run: |
          cd lib
          cargo build --release --examples

      - name: Run wasm-pack
        continue-on-error: false
        run: |
          cd lib
          wasm-pack build --release

      - name: Run cargo test
        continue-on-error: false
        run: |
          cd lib
          cargo test --release
        shell: pwsh

  lint-rust:
    name: Lint rust
    strategy:
      matrix:
        os:
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Create build version
        id: createbuildversion
        run: |
          echo "::set-output name=buildversion::$(date +'%y.%m%d').${{ github.run_number }}"

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        continue-on-error: false
        run: |
          cd lib
          cargo fmt --all -- --check

      - name: Run cargo clippy
        continue-on-error: false
        run: |
          cd lib
          cargo clippy --all-targets --all-features -- -D warnings

  build-lint-test-web:
    strategy:
      matrix:
        os:
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Create build version
        id: createbuildversion
        run: |
          cd web
          echo "::set-output name=buildversion::$(date +'%y.%m%d').${{ github.run_number }}"

      - name: Create build version
        id: createbuildcommit
        run: |
          cd web
          echo "::set-output name=buildversion::$(date +'%y.%m%d').${{ github.sha }}"

      - name: Check build version
        run: |
          cd web
          echo "Using version ${{steps.createbuildversion.outputs.buildversion}}"
          echo "Using version ${{steps.createbuildversion.outputs.buildcommit}}"

      - name: Install
        run: |
          cd web
          pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Check code format
        run: |
          cd web
          pnpm format

      - name: Lint code
        run: |
          cd web
          pnpm lint

      - name: Test
        run: |
          cd web
          pnpm test

      - name: Build
        run: |
          cd web
          pnpm build
        env:
          VITE_APP_RELATIVE_ROOT: /apps # NOTE: Ensure no trailing '/'
          VITE_APP_VERSION: ${{steps.createbuildversion.outputs.buildversion}}
          VITE_APP_COMMIT_ID: ${{steps.createbuildversion.outputs.buildcommit}}
          VITE_APP_AI_INSTRUMENTATION_KEY: ${{ secrets.AZURE_CREDENTIALS_KSAPPLICATIONS_AI_KEY }}

      - name: Set PWA scope
        uses: benday-inc/set-property-value-in-appsettings@main
        with:
          pathtosettingsfile: './web/build/manifest.json'
          keyname1: 'scope'
          valuetoset: '/apps/'

      - name: Generate app.ver
        run: |
          echo ${{steps.createbuildversion.outputs.buildversion}} >./web/build/app.ver
          cat ./web/build/app.ver

  deploy:
    name: Deplot
    needs: [build-test-rust, lint-rust, build-lint-test-web]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Environment Information
        run: |
          cd web
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: |
          cd web
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: |
          cd web
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
